#!/bin/bash
# üîç –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ deployment

echo "üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEPLOYMENT..."

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
if [ -f ".env.production.server" ]; then
    source .env.production.server
fi

if [ -f ".admin_api_key" ]; then
    source .admin_api_key
    echo "‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: ${ADMIN_API_KEY:0:8}..."
else
    echo "‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .admin_api_key —Ñ–∞–π–ª–µ"
fi

echo ""
echo "=== 1. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê ==="
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    docker-compose -f docker-compose.prod.yml ps
else
    echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
    docker-compose -f docker-compose.prod.yml logs --tail=10 ai-service
fi

echo ""
echo "=== 2. HEALTH CHECK ==="
HEALTH=$(curl -s http://localhost:8000/health)
if echo "$HEALTH" | grep -q "healthy"; then
    echo "‚úÖ Health check: $HEALTH"
else
    echo "‚ùå Health check failed: $HEALTH"
fi

echo ""
echo "=== 3. –ü–†–û–í–ï–†–ö–ê ADMIN API ==="
if [ -n "$ADMIN_API_KEY" ]; then
    STATS=$(curl -s -H "X-API-Key: $ADMIN_API_KEY" http://localhost:8000/stats)
    if echo "$STATS" | grep -q "version\|uptime"; then
        echo "‚úÖ Admin API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "Stats: $STATS" | head -c 100
    else
        echo "‚ùå Admin API failed: $STATS"
    fi
else
    echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ - –Ω–µ—Ç API –∫–ª—é—á–∞"
fi

echo ""
echo "=== 4. –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê ==="
RESULT=$(curl -s -X POST -H "Content-Type: application/json" \
    -d '{"text":"–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ"}' http://localhost:8000/process)

if echo "$RESULT" | grep -q "normalized\|success"; then
    echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç: $RESULT" | head -c 200
else
    echo "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ failed: $RESULT"
fi

echo ""
echo "=== 5. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==="
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–µ–∑ API –∫–ª—é—á–∞ admin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
UNAUTHORIZED=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/clear-cache)
if [ "$UNAUTHORIZED" = "401" ] || [ "$UNAUTHORIZED" = "403" ]; then
    echo "‚úÖ Admin endpoints –∑–∞—â–∏—â–µ–Ω—ã (HTTP $UNAUTHORIZED)"
else
    echo "‚ö†Ô∏è  Admin endpoints –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∑–∞—â–∏—â–µ–Ω—ã (HTTP $UNAUTHORIZED)"
fi

echo ""
echo "=== 6. –ü–†–û–í–ï–†–ö–ê ELASTICSEARCH –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ==="
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ES –æ—à–∏–±–æ–∫
ES_ERRORS=$(docker-compose -f docker-compose.prod.yml logs ai-service 2>&1 | grep -i "elasticsearch\|ES credentials\|connection" | tail -3)
if echo "$ES_ERRORS" | grep -q "ES credentials not configured"; then
    echo "‚ö†Ô∏è  ES credentials not configured - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º"
    echo "–õ–æ–≥–∏ ES: $ES_ERRORS"
elif echo "$ES_ERRORS" | grep -q "connection\|error"; then
    echo "‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å ES:"
    echo "$ES_ERRORS"
else
    echo "‚úÖ ES –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–µ–∑ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫"
fi

echo ""
echo "=== 7. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ==="
echo "üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ startup..."
START_TIME=$(docker-compose -f docker-compose.prod.yml logs ai-service | grep -i "startup\|started\|ready" | head -1)
if [ -n "$START_TIME" ]; then
    echo "‚úÖ Startup –ª–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã: $START_TIME"
else
    echo "‚ö†Ô∏è  Startup –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—â–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç"
fi

echo ""
echo "=== 8. –ü–ê–ú–Ø–¢–¨ –ò –†–ï–°–£–†–°–´ ==="
MEMORY_USAGE=$(docker stats ai-service-prod --no-stream --format "table {{.Container}}\t{{.MemUsage}}\t{{.CPUPerc}}" 2>/dev/null)
if [ -n "$MEMORY_USAGE" ]; then
    echo "‚úÖ –†–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    echo "$MEMORY_USAGE"
else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤"
fi

echo ""
echo "=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ==="

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
SCORE=0
[ -n "$(docker-compose -f docker-compose.prod.yml ps | grep Up)" ] && SCORE=$((SCORE + 1))
[ -n "$(curl -s http://localhost:8000/health | grep healthy)" ] && SCORE=$((SCORE + 1))
[ -n "$ADMIN_API_KEY" ] && [ -n "$(curl -s -H "X-API-Key: $ADMIN_API_KEY" http://localhost:8000/stats | grep version)" ] && SCORE=$((SCORE + 1))
[ -n "$(curl -s -X POST -H "Content-Type: application/json" -d '{"text":"test"}' http://localhost:8000/process | grep success)" ] && SCORE=$((SCORE + 1))

echo "üìä –û—Ü–µ–Ω–∫–∞ deployment: $SCORE/4"

if [ "$SCORE" -ge "3" ]; then
    echo "üéâ DEPLOYMENT –£–°–ü–ï–®–ï–ù! ($SCORE/4)"
    echo ""
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "‚Ä¢ –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f ai-service"
    echo "‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
    echo "‚Ä¢ –†–µ—Å—Ç–∞—Ä—Ç: docker-compose -f docker-compose.prod.yml restart ai-service"
    echo "‚Ä¢ Health: curl http://localhost:8000/health"
    [ -n "$ADMIN_API_KEY" ] && echo "‚Ä¢ Admin: curl -H 'X-API-Key: $ADMIN_API_KEY' http://localhost:8000/stats"
elif [ "$SCORE" -ge "2" ]; then
    echo "‚ö†Ô∏è  DEPLOYMENT –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù ($SCORE/4)"
    echo "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏"
else
    echo "‚ùå DEPLOYMENT FAILED ($SCORE/4)"
    echo "üîÑ –ó–∞–ø—É—Å—Ç–∏ rollback: ./rollback.sh"
fi

echo ""
echo "üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ deployment_check_$(date +%Y%m%d_%H%M%S).log"